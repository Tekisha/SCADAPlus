//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace DatabaseManager.TagService {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="TagService.ITagController")]
    public interface ITagController {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITagController/GetTagValue", ReplyAction="http://tempuri.org/ITagController/GetTagValueResponse")]
        double GetTagValue(string address);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITagController/GetTagValue", ReplyAction="http://tempuri.org/ITagController/GetTagValueResponse")]
        System.Threading.Tasks.Task<double> GetTagValueAsync(string address);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITagController/AddTag", ReplyAction="http://tempuri.org/ITagController/AddTagResponse")]
        void AddTag(string id, string description, string ioAddress, string driver, int scanTime, bool onOffScan, double lowLimit, double highLimit, string units, bool alarms);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITagController/AddTag", ReplyAction="http://tempuri.org/ITagController/AddTagResponse")]
        System.Threading.Tasks.Task AddTagAsync(string id, string description, string ioAddress, string driver, int scanTime, bool onOffScan, double lowLimit, double highLimit, string units, bool alarms);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITagController/RemoveTag", ReplyAction="http://tempuri.org/ITagController/RemoveTagResponse")]
        void RemoveTag(string id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITagController/RemoveTag", ReplyAction="http://tempuri.org/ITagController/RemoveTagResponse")]
        System.Threading.Tasks.Task RemoveTagAsync(string id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITagController/ChangeOutputValue", ReplyAction="http://tempuri.org/ITagController/ChangeOutputValueResponse")]
        void ChangeOutputValue(string tagId, double newValue);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITagController/ChangeOutputValue", ReplyAction="http://tempuri.org/ITagController/ChangeOutputValueResponse")]
        System.Threading.Tasks.Task ChangeOutputValueAsync(string tagId, double newValue);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITagController/GetOutputValue", ReplyAction="http://tempuri.org/ITagController/GetOutputValueResponse")]
        double GetOutputValue(string tagId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITagController/GetOutputValue", ReplyAction="http://tempuri.org/ITagController/GetOutputValueResponse")]
        System.Threading.Tasks.Task<double> GetOutputValueAsync(string tagId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITagController/TurnScanOnOff", ReplyAction="http://tempuri.org/ITagController/TurnScanOnOffResponse")]
        void TurnScanOnOff(string tagId, bool onOff);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITagController/TurnScanOnOff", ReplyAction="http://tempuri.org/ITagController/TurnScanOnOffResponse")]
        System.Threading.Tasks.Task TurnScanOnOffAsync(string tagId, bool onOff);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ITagControllerChannel : DatabaseManager.TagService.ITagController, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class TagControllerClient : System.ServiceModel.ClientBase<DatabaseManager.TagService.ITagController>, DatabaseManager.TagService.ITagController {
        
        public TagControllerClient() {
        }
        
        public TagControllerClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public TagControllerClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public TagControllerClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public TagControllerClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public double GetTagValue(string address) {
            return base.Channel.GetTagValue(address);
        }
        
        public System.Threading.Tasks.Task<double> GetTagValueAsync(string address) {
            return base.Channel.GetTagValueAsync(address);
        }
        
        public void AddTag(string id, string description, string ioAddress, string driver, int scanTime, bool onOffScan, double lowLimit, double highLimit, string units, bool alarms) {
            base.Channel.AddTag(id, description, ioAddress, driver, scanTime, onOffScan, lowLimit, highLimit, units, alarms);
        }
        
        public System.Threading.Tasks.Task AddTagAsync(string id, string description, string ioAddress, string driver, int scanTime, bool onOffScan, double lowLimit, double highLimit, string units, bool alarms) {
            return base.Channel.AddTagAsync(id, description, ioAddress, driver, scanTime, onOffScan, lowLimit, highLimit, units, alarms);
        }
        
        public void RemoveTag(string id) {
            base.Channel.RemoveTag(id);
        }
        
        public System.Threading.Tasks.Task RemoveTagAsync(string id) {
            return base.Channel.RemoveTagAsync(id);
        }
        
        public void ChangeOutputValue(string tagId, double newValue) {
            base.Channel.ChangeOutputValue(tagId, newValue);
        }
        
        public System.Threading.Tasks.Task ChangeOutputValueAsync(string tagId, double newValue) {
            return base.Channel.ChangeOutputValueAsync(tagId, newValue);
        }
        
        public double GetOutputValue(string tagId) {
            return base.Channel.GetOutputValue(tagId);
        }
        
        public System.Threading.Tasks.Task<double> GetOutputValueAsync(string tagId) {
            return base.Channel.GetOutputValueAsync(tagId);
        }
        
        public void TurnScanOnOff(string tagId, bool onOff) {
            base.Channel.TurnScanOnOff(tagId, onOff);
        }
        
        public System.Threading.Tasks.Task TurnScanOnOffAsync(string tagId, bool onOff) {
            return base.Channel.TurnScanOnOffAsync(tagId, onOff);
        }
    }
}
