//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ServiceReference1
{
    using System.Runtime.Serialization;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.1.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="TriggeredAlarmDto", Namespace="http://schemas.datacontract.org/2004/07/SCADA_Core.DTOs")]
    public partial class TriggeredAlarmDto : object
    {
        
        private ServiceReference1.Alarm AlarmField;
        
        private string TagDescriptionField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public ServiceReference1.Alarm Alarm
        {
            get
            {
                return this.AlarmField;
            }
            set
            {
                this.AlarmField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string TagDescription
        {
            get
            {
                return this.TagDescriptionField;
            }
            set
            {
                this.TagDescriptionField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.1.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Alarm", Namespace="http://schemas.datacontract.org/2004/07/SCADA_Core.Models")]
    public partial class Alarm : object
    {
        
        private bool AcknowledgedField;
        
        private string AlarmNameField;
        
        private string IdField;
        
        private double LimitField;
        
        private ServiceReference1.AlarmPriority PriorityField;
        
        private string TagIdField;
        
        private System.DateTime TimeField;
        
        private ServiceReference1.AlarmType TypeField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Acknowledged
        {
            get
            {
                return this.AcknowledgedField;
            }
            set
            {
                this.AcknowledgedField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string AlarmName
        {
            get
            {
                return this.AlarmNameField;
            }
            set
            {
                this.AlarmNameField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Id
        {
            get
            {
                return this.IdField;
            }
            set
            {
                this.IdField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Limit
        {
            get
            {
                return this.LimitField;
            }
            set
            {
                this.LimitField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public ServiceReference1.AlarmPriority Priority
        {
            get
            {
                return this.PriorityField;
            }
            set
            {
                this.PriorityField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string TagId
        {
            get
            {
                return this.TagIdField;
            }
            set
            {
                this.TagIdField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime Time
        {
            get
            {
                return this.TimeField;
            }
            set
            {
                this.TimeField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public ServiceReference1.AlarmType Type
        {
            get
            {
                return this.TypeField;
            }
            set
            {
                this.TypeField = value;
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.1.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="AlarmPriority", Namespace="http://schemas.datacontract.org/2004/07/SCADA_Core.Enums")]
    public enum AlarmPriority : int
    {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        High = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Medium = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Low = 3,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.1.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="AlarmType", Namespace="http://schemas.datacontract.org/2004/07/SCADA_Core.Enums")]
    public enum AlarmType : int
    {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Above = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Below = 1,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.1.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="TagValueDTO", Namespace="http://schemas.datacontract.org/2004/07/SCADA_Core.DTOs")]
    public partial class TagValueDTO : object
    {
        
        private string NameField;
        
        private string TagIdField;
        
        private System.DateTime TimeField;
        
        private double ValueField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name
        {
            get
            {
                return this.NameField;
            }
            set
            {
                this.NameField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string TagId
        {
            get
            {
                return this.TagIdField;
            }
            set
            {
                this.TagIdField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime Time
        {
            get
            {
                return this.TimeField;
            }
            set
            {
                this.TimeField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Value
        {
            get
            {
                return this.ValueField;
            }
            set
            {
                this.ValueField = value;
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.1.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference1.IReportController")]
    public interface IReportController
    {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReportController/GetAlarmsDuringInterval", ReplyAction="http://tempuri.org/IReportController/GetAlarmsDuringIntervalResponse")]
        ServiceReference1.TriggeredAlarmDto[] GetAlarmsDuringInterval(System.DateTime start, System.DateTime end, string token);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReportController/GetAlarmsDuringInterval", ReplyAction="http://tempuri.org/IReportController/GetAlarmsDuringIntervalResponse")]
        System.Threading.Tasks.Task<ServiceReference1.TriggeredAlarmDto[]> GetAlarmsDuringIntervalAsync(System.DateTime start, System.DateTime end, string token);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReportController/GetAlarmsByPriority", ReplyAction="http://tempuri.org/IReportController/GetAlarmsByPriorityResponse")]
        ServiceReference1.TriggeredAlarmDto[] GetAlarmsByPriority(ServiceReference1.AlarmPriority priority, string token);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReportController/GetAlarmsByPriority", ReplyAction="http://tempuri.org/IReportController/GetAlarmsByPriorityResponse")]
        System.Threading.Tasks.Task<ServiceReference1.TriggeredAlarmDto[]> GetAlarmsByPriorityAsync(ServiceReference1.AlarmPriority priority, string token);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReportController/GetTagValuesDuringInterval", ReplyAction="http://tempuri.org/IReportController/GetTagValuesDuringIntervalResponse")]
        ServiceReference1.TagValueDTO[] GetTagValuesDuringInterval(System.DateTime start, System.DateTime end, string token);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReportController/GetTagValuesDuringInterval", ReplyAction="http://tempuri.org/IReportController/GetTagValuesDuringIntervalResponse")]
        System.Threading.Tasks.Task<ServiceReference1.TagValueDTO[]> GetTagValuesDuringIntervalAsync(System.DateTime start, System.DateTime end, string token);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReportController/GetLatestAnalogInputTagValues", ReplyAction="http://tempuri.org/IReportController/GetLatestAnalogInputTagValuesResponse")]
        ServiceReference1.TagValueDTO[] GetLatestAnalogInputTagValues(string token);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReportController/GetLatestAnalogInputTagValues", ReplyAction="http://tempuri.org/IReportController/GetLatestAnalogInputTagValuesResponse")]
        System.Threading.Tasks.Task<ServiceReference1.TagValueDTO[]> GetLatestAnalogInputTagValuesAsync(string token);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReportController/GetLatetstDigitalInputTagValues", ReplyAction="http://tempuri.org/IReportController/GetLatetstDigitalInputTagValuesResponse")]
        ServiceReference1.TagValueDTO[] GetLatetstDigitalInputTagValues(string token);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReportController/GetLatetstDigitalInputTagValues", ReplyAction="http://tempuri.org/IReportController/GetLatetstDigitalInputTagValuesResponse")]
        System.Threading.Tasks.Task<ServiceReference1.TagValueDTO[]> GetLatetstDigitalInputTagValuesAsync(string token);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReportController/GetAllTagValues", ReplyAction="http://tempuri.org/IReportController/GetAllTagValuesResponse")]
        ServiceReference1.TagValueDTO[] GetAllTagValues(string id, string token);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReportController/GetAllTagValues", ReplyAction="http://tempuri.org/IReportController/GetAllTagValuesResponse")]
        System.Threading.Tasks.Task<ServiceReference1.TagValueDTO[]> GetAllTagValuesAsync(string id, string token);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.1.0")]
    public interface IReportControllerChannel : ServiceReference1.IReportController, System.ServiceModel.IClientChannel
    {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.1.0")]
    public partial class ReportControllerClient : System.ServiceModel.ClientBase<ServiceReference1.IReportController>, ServiceReference1.IReportController
    {
        
        /// <summary>
        /// Implement this partial method to configure the service endpoint.
        /// </summary>
        /// <param name="serviceEndpoint">The endpoint to configure</param>
        /// <param name="clientCredentials">The client credentials</param>
        static partial void ConfigureEndpoint(System.ServiceModel.Description.ServiceEndpoint serviceEndpoint, System.ServiceModel.Description.ClientCredentials clientCredentials);
        
        public ReportControllerClient() : 
                base(ReportControllerClient.GetDefaultBinding(), ReportControllerClient.GetDefaultEndpointAddress())
        {
            this.Endpoint.Name = EndpointConfiguration.BasicHttpBinding_IReportController.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public ReportControllerClient(EndpointConfiguration endpointConfiguration) : 
                base(ReportControllerClient.GetBindingForEndpoint(endpointConfiguration), ReportControllerClient.GetEndpointAddress(endpointConfiguration))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public ReportControllerClient(EndpointConfiguration endpointConfiguration, string remoteAddress) : 
                base(ReportControllerClient.GetBindingForEndpoint(endpointConfiguration), new System.ServiceModel.EndpointAddress(remoteAddress))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public ReportControllerClient(EndpointConfiguration endpointConfiguration, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(ReportControllerClient.GetBindingForEndpoint(endpointConfiguration), remoteAddress)
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public ReportControllerClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress)
        {
        }
        
        public ServiceReference1.TriggeredAlarmDto[] GetAlarmsDuringInterval(System.DateTime start, System.DateTime end, string token)
        {
            return base.Channel.GetAlarmsDuringInterval(start, end, token);
        }
        
        public System.Threading.Tasks.Task<ServiceReference1.TriggeredAlarmDto[]> GetAlarmsDuringIntervalAsync(System.DateTime start, System.DateTime end, string token)
        {
            return base.Channel.GetAlarmsDuringIntervalAsync(start, end, token);
        }
        
        public ServiceReference1.TriggeredAlarmDto[] GetAlarmsByPriority(ServiceReference1.AlarmPriority priority, string token)
        {
            return base.Channel.GetAlarmsByPriority(priority, token);
        }
        
        public System.Threading.Tasks.Task<ServiceReference1.TriggeredAlarmDto[]> GetAlarmsByPriorityAsync(ServiceReference1.AlarmPriority priority, string token)
        {
            return base.Channel.GetAlarmsByPriorityAsync(priority, token);
        }
        
        public ServiceReference1.TagValueDTO[] GetTagValuesDuringInterval(System.DateTime start, System.DateTime end, string token)
        {
            return base.Channel.GetTagValuesDuringInterval(start, end, token);
        }
        
        public System.Threading.Tasks.Task<ServiceReference1.TagValueDTO[]> GetTagValuesDuringIntervalAsync(System.DateTime start, System.DateTime end, string token)
        {
            return base.Channel.GetTagValuesDuringIntervalAsync(start, end, token);
        }
        
        public ServiceReference1.TagValueDTO[] GetLatestAnalogInputTagValues(string token)
        {
            return base.Channel.GetLatestAnalogInputTagValues(token);
        }
        
        public System.Threading.Tasks.Task<ServiceReference1.TagValueDTO[]> GetLatestAnalogInputTagValuesAsync(string token)
        {
            return base.Channel.GetLatestAnalogInputTagValuesAsync(token);
        }
        
        public ServiceReference1.TagValueDTO[] GetLatetstDigitalInputTagValues(string token)
        {
            return base.Channel.GetLatetstDigitalInputTagValues(token);
        }
        
        public System.Threading.Tasks.Task<ServiceReference1.TagValueDTO[]> GetLatetstDigitalInputTagValuesAsync(string token)
        {
            return base.Channel.GetLatetstDigitalInputTagValuesAsync(token);
        }
        
        public ServiceReference1.TagValueDTO[] GetAllTagValues(string id, string token)
        {
            return base.Channel.GetAllTagValues(id, token);
        }
        
        public System.Threading.Tasks.Task<ServiceReference1.TagValueDTO[]> GetAllTagValuesAsync(string id, string token)
        {
            return base.Channel.GetAllTagValuesAsync(id, token);
        }
        
        public virtual System.Threading.Tasks.Task OpenAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndOpen));
        }
        
        public virtual System.Threading.Tasks.Task CloseAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginClose(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndClose));
        }
        
        private static System.ServiceModel.Channels.Binding GetBindingForEndpoint(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.BasicHttpBinding_IReportController))
            {
                System.ServiceModel.BasicHttpBinding result = new System.ServiceModel.BasicHttpBinding();
                result.MaxBufferSize = int.MaxValue;
                result.ReaderQuotas = System.Xml.XmlDictionaryReaderQuotas.Max;
                result.MaxReceivedMessageSize = int.MaxValue;
                result.AllowCookies = true;
                return result;
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.EndpointAddress GetEndpointAddress(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.BasicHttpBinding_IReportController))
            {
                return new System.ServiceModel.EndpointAddress("http://localhost:8733/SCADA/ReportController/");
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.Channels.Binding GetDefaultBinding()
        {
            return ReportControllerClient.GetBindingForEndpoint(EndpointConfiguration.BasicHttpBinding_IReportController);
        }
        
        private static System.ServiceModel.EndpointAddress GetDefaultEndpointAddress()
        {
            return ReportControllerClient.GetEndpointAddress(EndpointConfiguration.BasicHttpBinding_IReportController);
        }
        
        public enum EndpointConfiguration
        {
            
            BasicHttpBinding_IReportController,
        }
    }
}
